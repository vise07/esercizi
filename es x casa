import java.util.Scanner;

public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int[] oddPart = new int[0];
        int[] evenPart = new int[0];
        int l;
        boolean uscita;

        //ciclo do while per inserire la lunghezza dell'array corretta (da 8 a 10)
        do {
            System.out.println("Inserisci la lunghezza del tuo array che vada da 8 a 10: ");
            l = sc.nextInt();
            if (l < 8 || l > 10) {
                System.out.println("Lunghezza array errata.");
                uscita = true;
            } else {
                uscita = false;
            }
        } while (uscita);

        System.out.println("Lunghezza array accettabile.");

        int[] array = new int[l];

        System.out.println("Inserisci dei numeri interi e non ripetuti che vadano da 1 a 30 che compongono il tuo array: ");

        //ciclo for per inserire i numeri
        for (int i = 0; i < l; i++) {
            int num;
            boolean numOK;

            //ciclo do while per inserire i numeri che compongono l'array (da 1 a 30)
            do {
                num = sc.nextInt();
                if (num > 0 && num < 31) {
                    System.out.println("Numero compreso");
                    numOK = true;
                } else {
                    System.out.println("Numero non compreso, reinserisci");
                    numOK = false;
                }
            } while (!numOK);

            array[i] = num;
        }

        //invocazione metodo
        array = eliminaDoppi(array);

        System.out.println("Ecco il tuo array senza duplicati: ");

        //stampa del contenuto delle celle dell'array senza numeri doppi
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
        //invocazione metodo
        int[] arrayDiviso = dividiArray(array, oddPart, evenPart);
        System.out.println("\nEcco il tuo array ordinato: ");

        //stampa dell'array diviso fra numeri dispari e pari
        for (int i = 0; i < array.length; i++) {
            System.out.print(arrayDiviso[i] + " ");
        }
    }

    //Metodo che elimina i numeri doppi
    public static int[] eliminaDoppi(int[] array) {

        int[] arrayNoDoppi = new int[array.length];

        int contaDoppi = 0;

        for (int i = 0; i < array.length; i++) {
            boolean doppi = false;
            for (int j = 0; j < contaDoppi; j++) {
                if (array[i] == arrayNoDoppi[j]) {
                    doppi = true;
                    break;
                }
            }
            if (!doppi) {
                arrayNoDoppi[contaDoppi] = array[i];
                contaDoppi++;
            }
        }

        return arrayNoDoppi;
    }

    public static int[] dividiArray(int[] array, int[] oddPart, int[] evenPart) {
        int contatore = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] % 2 == 1) {
                oddPart = addElement(oddPart, array[i]);
            } else {
                evenPart = addElement(evenPart, array[i]);
            }
        }
        int[] arrayDiviso = new int[oddPart.length + evenPart.length];
        for (int i = 0; i < arrayDiviso.length; i++) {
            arrayDiviso[contatore] = oddPart[i];
            if (i == oddPart.length - 1) {
                break;
            }
            contatore++;
        }
        for (int i = 0; i < arrayDiviso.length; i++) {
            arrayDiviso[contatore] = evenPart[i];
            if (i == evenPart.length - 1) {
                break;
            }
            contatore++;
        }
        return arrayDiviso;
    }

    private static int[] addElement(int[] array, int num) {
        int[] newArr = new int[array.length + 1];
        for (int i = 0; i < array.length; i++) {
            newArr[i] = array[i];
        }
        newArr[array.length] = num;
        return newArr;
    }
}
